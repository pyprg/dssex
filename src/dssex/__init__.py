# -*- coding: utf-8 -*-
"""
Copyright (C) 2022 pyprg

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

Created on Sun Aug  8 08:36:10 2021

@author: pyprg
"""

from .estim import calculate

DEFAULT_NETWORK = """
        n0<-------------cable------------>n1--((~)) motor
         slack=True      y_mn=1e3-1e3j               P10=42"""

def calculate_power_flow(*args):
    """Calculates the power flow of given network model.

    A multiline string can be the model e.g
    (the default input if no args are given)
    ::
        n0<-------------cable------------>n1--((~)) motor
         slack=True      y_mn=1e3-1e3j               P10=42

    Parameters
    ----------
    args: iterable (optional)
        egrid.builder.(
            Branch | Slacknode | Injection | Output |
            PValue | QValue | IValue | Vvalue | Branchtaps | 
            Defk | Link) | str

    Returns
    -------
    dict"""
    from egrid import make_model
    from .present import result_as_dict
    try:
        model = make_model(args if args else DEFAULT_NETWORK)
        msg = model.errormessages
    except (ValueError, KeyError) as e:
        from pandas import DataFrame
        msg = DataFrame({'errormessages': str(e)})
    if len(msg):
        return {'step': -1, 'success': False, 'errormessages': msg}
    else:
        *_, res = calculate(model) # res is last value generated by calculate
        res_dict = result_as_dict(res)
        res_dict['errormessages'] = msg
        return res_dict

def print_power_flow(*args):
    """Calculates power flow and prints results.

    A multiline string can be the model e.g
    (the default input if no args are given)
    ::
        n0<-------------cable------------>n1--((~)) motor
          slack=True      y_mn=1e3-1e3j               P10=42

    Parameters
    ----------
    args: iterable (optional)
        egrid.builder.(
            Branch | Slacknode | Injection | Output |
            PQValue | IValue | Vvalue | Branchtaps | Defk | Link) | str"""
    from pandas import DataFrame
    if not args:
        args = [DEFAULT_NETWORK]
    res = calculate_power_flow(*args)
    for arg in args:
        if isinstance(arg, str):
            print()
            print(arg)
    for k, v in res.items():
        print()
        if isinstance(v, DataFrame):
            if len(v):
                print(f'{k}:')
                print(v.to_markdown())
        else:
            print(f'{k}: {v}')
